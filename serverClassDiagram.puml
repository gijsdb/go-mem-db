@startuml
namespace controller {
    class CLIController << (S,Aquamarine) >> {
        - logger zerolog.Logger

        + HandleStartCLI() 

    }
    class TCPController << (S,Aquamarine) >> {
        - logger zerolog.Logger
        - address string
        - port string

        + HandleStartTCPServer() 

    }
}


"controller.CLIController""uses" o-- "zerolog.Logger"
"controller.TCPController""uses" o-- "zerolog.Logger"

namespace memdb {
    class DB << (S,Aquamarine) >> {
        - logger zerolog.Logger

        + Mutex *sync.RWMutex
        + Records <font color=blue>map</font>[string]Value

        + List() <font color=blue>map</font>[string]Value
        + Set(key string, value string) Value
        + Get(key string) ([]byte, bool)
        + Del(key string) bool

    }
    interface DBI  {
        + List() <font color=blue>map</font>[string]Value
        + Set(key string, value string) Value
        + Get(key string) ([]byte, bool)
        + Del(key string) bool

    }
    class Value << (S,Aquamarine) >> {
        + Created time.Time
        + Expiry time.Duration
        + Data []byte

    }
}

"memdb.DBI" <|-- "implements""memdb.DB"

"memdb.DB""uses" o-- "memdb.Value"
"memdb.DB""uses" o-- "sync.RWMutex"
"memdb.DB""uses" o-- "zerolog.Logger"
"memdb.Value""uses" o-- "time.Duration"
"memdb.Value""uses" o-- "time.Time"

namespace tcp {
    class Command << (S,Aquamarine) >> {
        + Value string
        + Args []string
        + Conn net.Conn

    }
    interface CommandHandlerI  {
        + Handle(cmd Command, s *Server) 

    }
    class DelCommandHandler << (S,Aquamarine) >> {
        + Handle(cmd Command, s *Server) 

    }
    class GetCommandHandler << (S,Aquamarine) >> {
        + Handle(cmd Command, s *Server) 

    }
    class ListCommandHandler << (S,Aquamarine) >> {
        + Handle(cmd Command, s *Server) 

    }
    class Server << (S,Aquamarine) >> {
        - logger zerolog.Logger
        - address string
        - listener net.Listener
        - commands <font color=blue>chan</font> Command

        + DB memdb.DBI

        + ReadCommand(conn net.Conn) 
        + WriteCommand(conn net.Conn, data string) 
        + HandleCommand() 
        + Start() 
        + HandleConnections() 

    }
    class SetCommandHandler << (S,Aquamarine) >> {
        + Handle(cmd Command, s *Server) 

    }
}

"tcp.CommandHandlerI" <|-- "implements""tcp.DelCommandHandler"
"tcp.CommandHandlerI" <|-- "implements""tcp.GetCommandHandler"
"tcp.CommandHandlerI" <|-- "implements""tcp.ListCommandHandler"
"tcp.CommandHandlerI" <|-- "implements""tcp.SetCommandHandler"

"tcp.Command""uses" o-- "net.Conn"
"tcp.Server""uses" o-- "memdb.DBI"
"tcp.Server""uses" o-- "net.Listener"
"tcp.Server""uses" o-- "tcp.Command"
"tcp.Server""uses" o-- "zerolog.Logger"

@enduml
